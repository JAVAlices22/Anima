package anima;

import java.util.ArrayList;
import java.util.Random;

import org.newdawn.slick.geom.Circle;
import org.newdawn.slick.*;
import org.newdawn.slick.state.BasicGameState;
import org.newdawn.slick.state.StateBasedGame;
import org.newdawn.slick.state.transition.EmptyTransition;
import org.newdawn.slick.state.transition.FadeInTransition;
import org.newdawn.slick.state.transition.FadeOutTransition;

public class PrincipalGameState extends BasicGameState {
    private ArrayList<Circle> balls;
    private Circle mouseBall;
    private int timePassed;
    private Random random;
    
    public void init(GameContainer arg0, StateBasedGame arg1) throws SlickException {
        balls = new ArrayList<Circle>();
        mouseBall = new Circle(0,0,10);
        timePassed = 0;
        random = new Random();
    } 
    
    public void update(GameContainer container, StateBasedGame sbg, int delta) throws SlickException {
        
    	while(Signal.wait == true){
    		try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
    	}
    	
    	if(container.getInput().isKeyPressed(Input.KEY_ESCAPE)){
            sbg.enterState(1, new FadeOutTransition(), new EmptyTransition());
        }
        mouseBall.setCenterX(container.getInput().getMouseX());
        mouseBall.setCenterY(container.getInput().getMouseY());
        timePassed += delta;
        if(timePassed > 1000) {
            timePassed = 0;
            balls.add(new Circle(200+random.nextInt(500), 50+random.nextInt(500), 10));
        }
        for (int i = balls.size()-1 ; i >= 0; i--) {
            Circle c = balls.get(i);
            if(balls.size() > 4){
                balls.remove(0);
                SetupClass.lives--;
            } else if(c.intersects(mouseBall) && container.getInput().isMousePressed(Input.MOUSE_LEFT_BUTTON)){
                    balls.remove(i);
                    SetupClass.gameScore ++;
                }
            }
            if(SetupClass.lives <= 0){
                sbg.enterState(1, new FadeOutTransition(), new EmptyTransition());
            }
        }
    
    public void render(GameContainer arg0, StateBasedGame arg1, Graphics g) throws SlickException {
        g.setColor(Color.yellow);
        g.fill(mouseBall);
        g.setColor(Color.red);
        for(Circle c : balls){
            g.fill(c);
        }
        g.setColor(Color.white);
        g.drawString("Current balls: " + balls.size(), 20, 50);
        g.drawString("Current lives: " + SetupClass.lives, 20, 65);
        g.drawString("Current points: " + SetupClass.gameScore, 20, 80);
    }
    
    public int getID() {
        return 0;
    }
}
